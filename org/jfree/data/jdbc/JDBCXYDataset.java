package org.jfree.data.jdbc;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import org.jfree.data.Range;
import org.jfree.data.RangeInfo;
import org.jfree.data.xy.AbstractXYDataset;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.layout.FormatLayout;
import org.jfree.ui.Align;
import org.jfree.util.AbstractObjectList;
import org.jfree.util.Log;
import org.jfree.util.LogTarget;

public class JDBCXYDataset extends AbstractXYDataset implements XYDataset, TableXYDataset, RangeInfo {
    private String[] columnNames;
    private transient Connection connection;
    private boolean isTimeSeries;
    private double maxValue;
    private double minValue;
    private ArrayList rows;

    private JDBCXYDataset() {
        this.columnNames = new String[0];
        this.maxValue = 0.0d;
        this.minValue = 0.0d;
        this.isTimeSeries = false;
        this.rows = new ArrayList();
    }

    public JDBCXYDataset(String url, String driverName, String user, String password) throws SQLException, ClassNotFoundException {
        this();
        Class.forName(driverName);
        this.connection = DriverManager.getConnection(url, user, password);
    }

    public JDBCXYDataset(Connection con) throws SQLException {
        this();
        this.connection = con;
    }

    public JDBCXYDataset(Connection con, String query) throws SQLException {
        this(con);
        executeQuery(query);
    }

    public boolean isTimeSeries() {
        return this.isTimeSeries;
    }

    public void setTimeSeries(boolean timeSeries) {
        this.isTimeSeries = timeSeries;
    }

    public void executeQuery(String query) throws SQLException {
        executeQuery(this.connection, query);
    }

    public void executeQuery(Connection con, String query) throws SQLException {
        if (con == null) {
            throw new SQLException("There is no database to execute the query.");
        }
        ResultSet resultSet = null;
        Statement statement = null;
        int[] columnTypes;
        int column;
        try {
            statement = con.createStatement();
            resultSet = statement.executeQuery(query);
            ResultSetMetaData metaData = resultSet.getMetaData();
            int numberOfColumns = metaData.getColumnCount();
            int numberOfValidColumns = 0;
            columnTypes = new int[numberOfColumns];
            column = 0;
            while (column < numberOfColumns) {
                int type = metaData.getColumnType(column + 1);
                switch (type) {
                    case -7:
                    case -5:
                    case LogTarget.INFO /*2*/:
                    case LogTarget.DEBUG /*3*/:
                    case Align.WEST /*4*/:
                    case Align.TOP_LEFT /*5*/:
                    case Align.SOUTH_WEST /*6*/:
                    case FormatLayout.LCBLCB /*7*/:
                    case AbstractObjectList.DEFAULT_INITIAL_CAPACITY /*8*/:
                    case 91:
                    case 92:
                    case 93:
                        numberOfValidColumns++;
                        columnTypes[column] = type;
                        break;
                    default:
                        Log.warn("Unable to load column " + column + " (" + type + "," + metaData.getColumnClassName(column + 1) + ")");
                        columnTypes[column] = 0;
                        break;
                }
                column++;
            }
            if (numberOfValidColumns <= 1) {
                throw new SQLException("Not enough valid columns where generated by query.");
            }
            ArrayList newRow;
            this.columnNames = new String[(numberOfValidColumns - 1)];
            int currentColumn = 0;
            for (column = 1; column < numberOfColumns; column++) {
                if (columnTypes[column] != 0) {
                    this.columnNames[currentColumn] = metaData.getColumnLabel(column + 1);
                    currentColumn++;
                }
            }
            if (this.rows != null) {
                column = 0;
                while (true) {
                    if (column < this.rows.size()) {
                        ((ArrayList) this.rows.get(column)).clear();
                        column++;
                    } else {
                        this.rows.clear();
                    }
                }
            }
            switch (columnTypes[0]) {
                case 91:
                case 92:
                case 93:
                    this.isTimeSeries = true;
                    break;
                default:
                    this.isTimeSeries = false;
                    break;
            }
            while (resultSet.next()) {
                newRow = new ArrayList();
                for (column = 0; column < numberOfColumns; column++) {
                    Object xObject = resultSet.getObject(column + 1);
                    switch (columnTypes[column]) {
                        case -5:
                        case LogTarget.INFO /*2*/:
                        case LogTarget.DEBUG /*3*/:
                        case Align.WEST /*4*/:
                        case Align.TOP_LEFT /*5*/:
                        case Align.SOUTH_WEST /*6*/:
                        case FormatLayout.LCBLCB /*7*/:
                        case AbstractObjectList.DEFAULT_INITIAL_CAPACITY /*8*/:
                            newRow.add(xObject);
                            break;
                        case LogTarget.ERROR /*0*/:
                            break;
                        case 91:
                        case 92:
                        case 93:
                            newRow.add(new Long(((Date) xObject).getTime()));
                            break;
                        default:
                            System.err.println("Unknown data");
                            columnTypes[column] = 0;
                            break;
                    }
                }
                this.rows.add(newRow);
            }
            if (this.rows.isEmpty()) {
                newRow = new ArrayList();
                for (column = 0; column < numberOfColumns; column++) {
                    if (columnTypes[column] != 0) {
                        newRow.add(new Integer(0));
                    }
                }
                this.rows.add(newRow);
            }
            if (this.rows.size() < 1) {
                this.maxValue = 0.0d;
                this.minValue = 0.0d;
            } else {
                this.maxValue = Double.NEGATIVE_INFINITY;
                this.minValue = Double.POSITIVE_INFINITY;
                int rowNum = 0;
                while (true) {
                    if (rowNum < this.rows.size()) {
                        ArrayList row = (ArrayList) this.rows.get(rowNum);
                        for (column = 1; column < numberOfColumns; column++) {
                            Object testValue = row.get(column);
                            if (testValue != null) {
                                double test = ((Number) testValue).doubleValue();
                                if (test < this.minValue) {
                                    this.minValue = test;
                                }
                                if (test > this.maxValue) {
                                    this.maxValue = test;
                                }
                            }
                        }
                        rowNum++;
                    }
                }
            }
            fireDatasetChanged();
            if (resultSet != null) {
                try {
                    resultSet.close();
                } catch (Exception e) {
                }
            }
            if (statement != null) {
                try {
                    statement.close();
                } catch (Exception e2) {
                }
            }
        } catch (SQLException e3) {
            columnTypes[column] = 0;
            throw e3;
        } catch (Throwable th) {
            if (resultSet != null) {
                try {
                    resultSet.close();
                } catch (Exception e4) {
                }
            }
            if (statement != null) {
                try {
                    statement.close();
                } catch (Exception e5) {
                }
            }
        }
    }

    public Number getX(int seriesIndex, int itemIndex) {
        return (Number) ((ArrayList) this.rows.get(itemIndex)).get(0);
    }

    public Number getY(int seriesIndex, int itemIndex) {
        return (Number) ((ArrayList) this.rows.get(itemIndex)).get(seriesIndex + 1);
    }

    public int getItemCount(int seriesIndex) {
        return this.rows.size();
    }

    public int getItemCount() {
        return getItemCount(0);
    }

    public int getSeriesCount() {
        return this.columnNames.length;
    }

    public Comparable getSeriesKey(int seriesIndex) {
        if (seriesIndex >= this.columnNames.length || this.columnNames[seriesIndex] == null) {
            return "";
        }
        return this.columnNames[seriesIndex];
    }

    public int getLegendItemCount() {
        return getSeriesCount();
    }

    public String[] getLegendItemLabels() {
        return this.columnNames;
    }

    public void close() {
        try {
            this.connection.close();
        } catch (Exception e) {
            System.err.println("JdbcXYDataset: swallowing exception.");
        }
    }

    public double getRangeLowerBound(boolean includeInterval) {
        return this.minValue;
    }

    public double getRangeUpperBound(boolean includeInterval) {
        return this.maxValue;
    }

    public Range getRangeBounds(boolean includeInterval) {
        return new Range(this.minValue, this.maxValue);
    }
}
